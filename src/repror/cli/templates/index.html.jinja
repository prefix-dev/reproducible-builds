<!doctype html>
<html>

<head>
    <meta charset="UTF-8" />
    <title>Rattler Build - Reproducibility</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script >
    <script src="https://kit.fontawesome.com/d97e8cb8b0.js" crossorigin="anonymous" defer></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
</head>
<script>
    function platformTab() {
        return {
            activeTab: 1,
            selectTab(tab) {
                this.activeTab = tab;
            },
        };
    }

    function ansiToHtml(text) {
        const ansiToHtmlMap = {
            // Reset
            '0': 'color: initial; background-color: initial; font-weight: normal; font-style: normal; text-decoration: none;',
            // Bold
            '1': 'font-weight: bold;',
            // Underline
            '4': 'text-decoration: underline;',
            // Foreground colors
            '30': 'color: black;',
            '31': 'color: red;',
            '32': 'color: green;',
            '33': 'color: yellow;',
            '34': 'color: blue;',
            '35': 'color: magenta;',
            '36': 'color: cyan;',
            '37': 'color: white;',
            // Background colors
            '40': 'background-color: black;',
            '41': 'background-color: red;',
            '42': 'background-color: green;',
            '43': 'background-color: yellow;',
            '44': 'background-color: blue;',
            '45': 'background-color: magenta;',
            '46': 'background-color: cyan;',
            '47': 'background-color: white;'
        };

        // Regex to match ANSI escape codes
        const ansiRegex = /\x1b\[(\d+;?)*m/g;

        return text.replace(ansiRegex, (match) => {
            const codes = match.slice(2, -1).split(';');
            const styles = codes.map(code => ansiToHtmlMap[code] || '').join('');
            return `<span style="${styles}">`;
        }).replace(/\x1b\[0m/g, '</span>');
    }

    // Calculate a human timestamp
    function timeAgo(timestamp) {
        const now = new Date();
        const date = new Date(timestamp);
        const diffInSeconds = Math.floor((now - date) / 1000);

        const seconds = diffInSeconds;
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);
        const weeks = Math.floor(days / 7);
        const months = Math.floor(days / 30); // Rough approximation
        const years = Math.floor(days / 365); // Rough approximation

        if (seconds < 60) {
            return `${seconds} second${seconds !== 1 ? 's' : ''} ago`;
        } else if (minutes < 60) {
            return `${minutes} minute${minutes !== 1 ? 's' : ''} ago`;
        } else if (hours < 24) {
            return `${hours} hour${hours !== 1 ? 's' : ''} ago`;
        } else if (days < 7) {
            return `${days} day${days !== 1 ? 's' : ''} ago`;
        } else if (weeks < 4) {
            return `${weeks} week${weeks !== 1 ? 's' : ''} ago`;
        } else if (months < 12) {
            return `${months} month${months !== 1 ? 's' : ''} ago`;
        } else {
            return `${years} year${years !== 1 ? 's' : ''} ago`;
        }
    }
</script>

<script>
    document.addEventListener('alpine:init', () => {
        console.log('Alpine initialized');
        Alpine.store("me", {me: true});
        Alpine.store('modal', {
                      show: false,
                      modalMessage: "",
                      openModalWith(message) {
                          this.modalMessage = message;
                          this.show = true;
                      },
                      closeModal() {
                          this.show = false;
                      },
                  });
    });
</script>

<body class="bg-gray-100" x-data="modal()">
    <!-- Error messages modal -->
    <div x-show="$store.modal.show" id="modal" class="modal fixed inset-0 bg-gray-800 bg-opacity-75 items-center justify-center z-10 ">
        <div  class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center" x-transition:enter="transition ease-out duration-300" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100" x-transition:leave="transition ease-in duration-300" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0">
            <div class="bg-white rounded-lg p-8 mx-auto">
                <h2 class="text-2xl mb-4">Error Reason</h2>
                <pre class="mb-4 max-w-[80vw] overflow-auto" x-html="ansiToHtml($store.modal.modalMessage)"></pre>
                <button @click="$store.modal.closeModal()" class="px-4 py-2 bg-red-500 text-white rounded">Close Modal</button>
            </div>
        </div>div>
        </div >
    </div>
    <div class="container mx-auto p-4" x-data="platformTab()">
        <h1 class="text-4xl font-bold py-6 mx-auto">
            How Reproducible is
            <span class="font-mono">rattler-build</span>?
        </h1>
        <section>
            <h2 class="text-xl font-bold py-4">
                Introduction
            </h2>
            <span>
                This website contains some information about
                <span class="font-mono">.conda</span> packages that have been using
                <a href="https://github.com/prefix-dev/rattler-build"
                    class="text-blue-500 underline hover:text-blue-300">
                    <span class="font-mono">rattler-build</span>
                    <i class="fa-brands fa-github"></i>
                </a> to build their packages.
            </p>

            <p>
                More information regarding what we mean by reproducibility can be found
                at the github repository for this project <a class="text-blue-500 underline hover:text-blue-300"
                    href="https://github.com/prefix-dev/reproducible-builds">Click Here&nbsp;<i class="fa-brands fa-github"></i></a>
            </p>
        </section>

        <!-- Reproducibility Percentages -->
        <div class="my-6">
            <h2 class="text-xl font-bold mb-2">
                Reproducibility Per Platform
            </h2>
            <p class="py-4">
                The following table shows the reproducibility of builds per platform. <br />
                Click on a platform to view the builds for that platform
            </p>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {% for platform, builds in by_platform.items() %}
                {% set total_recipes = counts_per_platform[platform].total_recipes[-1] %}
                {% set total_builds = counts_per_platform[platform].total_builds[-1] %}
                {% set reproducible_builds = counts_per_platform[platform].rebuilds[-1] %}
                {% set reproducibility_percentage = (reproducible_builds / total_builds) * 100 %}
                <div class="bg-white p-4 rounded shadow border cursor-pointer"
                    :class="{ 'outline outline-blue-600 outline-4': activeTab === {{loop.index}}, 'outline outline-gray-300 outline-1': activeTab !== {{loop.index}} }"
                    @click="selectTab({{loop.index}})">
                    <h3 class="text-lg font-semibold">
                        <span class="{{ platform | platform_fa }}"></span>
                        {{ platform | capitalize }}
                    </h3>
                    <table class="mt-3 w-full">
                        <tr>
                            <td>Total Recipes:</td>
                            <td class="font-bold">{{ total_recipes }}</td >
                        </tr>
                        <tr>
                            <td>Total Builds:</td>
                            <td class="font-bold">{{ total_builds }}</td >
                        </tr>
                        <tr>
                            <td>Reproducible Builds:</td>
                            <td class="font-bold">{{ reproducible_builds }}</td >
                        </tr>
                        <tr>
                            <td>Total Reproducibility:</td>
                            <td class="font-bold" style="color: rgb{{interpolate_color(reproducibility_percentage)}}">{{ reproducibility_percentage | round(2) }}%</td >
                        </tr>
                    </table>
                </div>
                {% endfor %}
            </div>
        </div>

        <div>
            {% for platform in by_platform.keys() %}
            <canvas id="chart-{{ platform }}" x-show="activeTab == {{ loop.index }}"></canvas>
            {% endfor %}
        </div>
        <div class="inline-flex gap-4 border py-3 px-4 bg-gray-50 rounded-xl">
            <div>Reproducible: <i class="{{ reproducible }}"></i></div>
            <span>｜</span>
            <div>Non-reproducible: <i class="{{ non_reproducible }}"></i></div>
            <span>｜</span>
            <div>Failure: <i class="{{ failure }}"></i></div>
        </div>
        {% for platform, builds in by_platform.items() %}
        <div class="max-w-xl min-w-full py-2 mt-2 mb-6" x-show="activeTab === {{loop.index}}">
            <table class="min-w-full bg-white border border-gray-300">
                <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                    <tr class="border-b">
                        <th class="py-2 px-4">Recipe Name</th>
                        <th class="py-2 px-4">Build Status</th>
                        <th class="py-2 px-4">Rebuild Status</th>
                        <th class="py-2 px-4">Time</th>
                        <th class="py-2 px-4">Reason</th>
                        <th class="py-2 px-4">
                            Github Action Link
                        </th>
                    </tr>
                </thead>
                <tbody>
                    {% for build in builds | sort(attribute='build_state, recipe_name') %}
                    <tr class="border-b border-dashed">
                        <td class="py-2 px-4">
                            <span class="{{ build_state_fa(build.build_state, build.rebuild_state) }}"></span>
                            <b>{{ build.recipe_name }}</b>
                        </td>
                        <td class="py-2 px-4">
                            {{ build.build_state.value | capitalize }}
                        </td>
                        <td class="py-2 px-4">
                            {{ build.rebuild_state.value | capitalize if
                            build.rebuild_state else 'N/A' }}
                        </td>
                        <td class="py-2 px-4" x-data="{ humanTime: timeAgo('{{ build.time }}') }" x-html="humanTime"></td>
                        <td class="py-2 px-4">
                            {% if build.reason %}
                            <button @click="$store.modal.openModalWith($event.target.nextSibling.nextSibling.innerHTML)" class="px-4 py-2 bg-red-500 text-white rounded">Show Error</button>
                            <pre class="hidden">
                                {{ build.reason }}
                            </pre >
                            {% endif %}
                        </td>
                        <td class="py-2 px-4 flex justify-center">
                            <a href="{{ build.actions_url }}"
                                class="inline-block transform transition-transform duration-300 hover:translate-x-2 hover:opacity-50 ">
                                <i class="fa-solid fa-arrow-right text-m"></i>
                                <i class="fa-brands fa-github text-xl"></i>
                            </a>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        {% endfor %}
    </div>
</body>

<script>

    const config = {
        type: 'line',
        options: {
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: 'Rebuild Statistics',
                    font: {
                        size: 16 // Change this value to the desired font size
                    }
                },
                tooltip: {
                    mode: 'index'
                },
                legend: {
                    labels: {
                        font: {
                            size: 16 // Change this value to the desired font size
                        }
                    },
                }
            },
            interaction: {
                mode: 'nearest',
                axis: 'x',
                intersect: false
            },
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Date',
                        font: {
                            size: 16 // Change this value to the desired font size
                        }
                    },
                    ticks: {
                        font: {
                            size: 14 // Change this value to the desired font size
                        }
                    }
                },
                y: {
                    stacked: false,
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Number of Success(es)',
                        font: {
                            size: 16 // Change this value to the desired font size
                        }
                    },
                    ticks: {
                        font: {
                            size: 14 // Change this value to the desired font size
                        }
                    }
                }
            }
        }
    };

    {% for platform in by_platform.keys() %}
    // Change the title of the chart
    const data_{{platform}} = {
        labels: {{ dates | tojson }},
        datasets: [
            {
                label: 'Reproducible',
                data: {{ counts_per_platform[platform].rebuilds | tojson }},
                fill: true,
            },
            {
                label: 'Builds',
                data: {{ counts_per_platform[platform].builds | tojson }},
                fill: true,
            },
            {
                label: 'Total Builds',
                data: {{ counts_per_platform[platform].total_builds | tojson }},
                fill: false
            },
            {
                label: 'Total Recipes',
                data: {{ counts_per_platform[platform].total_recipes | tojson }},
                fill: false,
                borderDash: [10, 5],
            },
        ]
    };
    const config_{{ platform }} = {
      ...config,
      options: {
        ...config.options,
        plugins: {
          ...config.options.plugins,
          title: {
            ...config.options.plugins.title,
            text: 'Rebuild Statistics for {{ platform | capitalize }}',
          },
        },
      },
      data: data_{{platform}},
    };
    const chart_{{ platform }} = new Chart(document.getElementById("chart-{{ platform }}"), config_{{ platform }});
    {% endfor %}
</script>

</html>
